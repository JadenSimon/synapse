name: pipeline-step
run-name: pipeline-step_${{ inputs.dispatch-id }}

on:
  workflow_dispatch:
    inputs:
      dispatch-id:
        type: string
        required: true
      pipeline-context:
        type: string
        default: "{}"
      step-config: 
        type: string
        default: "{}"
      runs-on:
        type: string
        default: ubuntu-latest

jobs:
  execute:
    runs-on: ${{ inputs.runs-on }}
    permissions:
      id-token: write
      contents: read

    defaults:
      run:
        working-directory: ${{ fromJSON(inputs.step-config).workingDir }}

    env:
      SYNAPSE_FORCE_REMOTE_PROJECTS: yes
      SYNAPSE_ENV: ${{ fromJSON(inputs.step-config).environment || 'local' }}
      SYNAPSE_PIPELINE_DEPS: ${{ fromJSON(inputs.pipeline-context).deps }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ fromJSON(inputs.pipeline-context).targetCommit }}

      - uses: Cohesible/get-credentials-action@09824e319b5811b924cfbdd208129f2681127ee4

      - run: curl -fsSL "https://synap.sh/install?hash=b83ba72ba69698ac31f0528774bf9f346d171b5f529756c6e02bbf239f0a81d5" | bash
        if: inputs.runs-on != 'windows-2022'
      - run: irm https://synap.sh/install.ps1 | iex
        if: inputs.runs-on == 'windows-2022'
      - run: synapse --version

      - run: ${{ fromJSON(inputs.step-config).commands }}
        if: fromJSON(inputs.step-config).commands

      - name: Compile
        run: synapse compile
        if: fromJSON(inputs.step-config).publish

      - name: Deploy
        run: synapse deploy
        if: fromJSON(inputs.step-config).deploy

      - name: Test
        run: synapse test
        if: fromJSON(inputs.step-config).test

      - name: Publish
        run: synapse publish --remote --ref ${{ fromJSON(inputs.pipeline-context).stepKeyHash }}
        if: fromJSON(inputs.step-config).publish

